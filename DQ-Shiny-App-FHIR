
# -------------------------------------------------------------------------------
# Title:        Package Initialization for Interactive Medical Data App
# Authors:      Sarah Braunᵃ, Christian Draegerᵇ, Lea Michaelisᵃ,
#               Sherry Freieslebenᶜ, Dagmar Waltemathᵃᶜ,
#               Matthias Löbeᵇ, Judith Wodkeᵃᵇ
# Affiliations: a) University of Greifswald – Institute of Biomedicine
#               b) University of Greifswald – Center for Health Informatics
#               c) University of Greifswald – Clinic for Internal Medicine
# Date:         2025-01-08
# Contact:      sarah.braun@med.uni-greifswald.de
# GitHub Repo:  
# Description:  Installs and loads all required R packages for:
#               1. Shiny front-end & UI theming
#               2. JSON/CSV data parsing
#               3. FHIR integration (HAPI test server)
#               4. Data manipulation & visualization
#               5. Geospatial data handling
# -------------------------------------------------------------------------------

# Helper: install missing packages and load them
ensure_pkg <- function(pkgs) {
  missing <- setdiff(pkgs, installed.packages()[, "Package"])
  if (length(missing)) install.packages(missing, dependencies = TRUE)
  invisible(lapply(pkgs, library, character.only = TRUE))
}

library(shiny)
library(shinythemes)
library(shinyjqui)
library(leaflet)

# Define all required packages
required_pkgs <- c(
  # Shiny & UI
  "shiny", "shinythemes", "shinyjqui",
  # Data parsing
  "jsonlite", "readr",
  # FHIR integration
  "fhircrackr", "httr",
  # Data manipulation
  "dplyr", "tidyr",
  # Visualization
  "ggplot2", "leaflet",
  # Geospatial
  "geodata", "terra"
)

# Install and load
ensure_pkg(required_pkgs)

# Resolve namespace conflicts
conflicts_prefer(base::intersect)

message("✔ Packages installed and loaded: ", paste(required_pkgs, collapse = ", "))

# -------------------------------------------------------------------------------
# UI definition
# -------------------------------------------------------------------------------



ui <- fluidPage(
  # 1. Theme
  theme = shinytheme("spacelab"),
  
  # 2. Custom CSS & JS
  tags$head(
    tags$style(HTML(
      ".plot_box {\n        width: 300px;\n        padding: 15px;\n        border: 1px solid #B0B0B0;\n        border-radius: 8px;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        background-color: transparent;\n        position: absolute;\n      }"
    )),
    tags$script(HTML(
      "// Stack all plots\n      $(document).on('click', '#stackPlots', function() {\n        $('.plot_box').css({top: '0px', left: '0px'});\n      });\n      // Stack selected plots (max 2)\n      $(document).on('click', '#stackSelectedPlots', function() {\n        var sel = $('#selectedPlotsToStack').val() || [];\n        sel.slice(0,2).forEach(function(name) {\n          $('.plot_box[data-plot-name=' + name + ']').css({top: '0px', left: '0px'});\n        });\n      });"
    ))
  ),
  
  # 3. Navigation
  navbarPage(
    title = "Medical Data Visualization Dashboard",
    
    # 3.1 Data Upload
    tabPanel("Data Upload",
             sidebarLayout(
               sidebarPanel(
                 radioButtons("data_source", "Data Source:",
                              choices = c("File (CSV/JSON)" = "file",
                                          "FHIR (HAPI Test Server)" = "fhir")
                 ),
                 br(),
                 conditionalPanel(
                   condition = "input.data_source == 'file'",
                   h4("Upload Files"),
                   fileInput("dataFiles", "Select CSV or JSON Files",
                             accept = c('.csv','.json'), multiple = TRUE),
                   uiOutput("mappingUI")
                 ),
                 conditionalPanel(
                   condition = "input.data_source == 'fhir'",
                   h4("FHIR Settings"),
                   textInput("fhir_url", "Server URL:", value = "http://hapi.fhir.org/baseR4"),
                   numericInput("max_bundles", "Max Bundles:", value = 10, min = 1, step = 1),
                   actionButton("load_fhir", "Load FHIR Data")
                 ),
                 br(),
                 h4("Data Integration Centers in Germany"),
                 leafletOutput("map", height = '400px')
               ),
               mainPanel(
                 h4("Uploaded/Loaded Datasets"),
                 tableOutput("dataList")
               )
             )
    ),
    
    # 3.2 Visualization
    tabPanel("Visualization",
             fluidRow(
               column(12,
                      actionButton("stackPlots", "Stack All Plots"),
                      br(), br(),
                      selectInput("selectedPlotsToStack", "Select Two Plots to Stack:",
                                  choices = NULL, multiple = TRUE),
                      actionButton("stackSelectedPlots", "Stack Selected Plots"),
                      br(), br(),
                      div(
                        id = 'plot_area', style = 'position: relative; height: 800px; border: 1px solid #DDD; overflow: hidden;',
                        uiOutput("plotsUI")
                      )
               )
             )
    ),
    
    # 3.3 Combined Data
    tabPanel("Combined Data",
             fluidRow(
               column(8,
                      h4("Combined Data Plot"),
                      plotOutput("combinedPlot"),
                      hr(),
                      h4("Intersection Plot"),
                      plotOutput("intersectionPlot")
               ),
               column(4,
                      div(
                        style = 'padding:15px; border:1px solid #DDD; border-radius:8px; background-color:#FFF;',
                        h4("Combine Data"),
                        checkboxGroupInput("combineFiles", "Select Files to Combine:", choices = NULL),
                        uiOutput("valueSelectors"),
                        actionButton("combineData", "Combine Data"),
                        downloadButton("downloadCombined", "Download Combined Data (JSON)"),
                        br(), br(),
                        h4("Intersection Settings"),
                        p("Only categories present in ALL selected files will be kept."),
                        selectInput("intersectionValues", "Common Categories:", choices = NULL, multiple = TRUE),
                        actionButton("combineIntersection", "Combine Intersection Data"),
                        downloadButton("downloadIntersection", "Download Intersection Data (JSON)")
                      )
               )
             )
    ),
    
    # 3.4 Statistics
    tabPanel("Statistics",
             fluidRow(
               column(12,
                      h4("Dataset Statistics"),
                      p("Basic metrics for each dataset:"),
                      tableOutput("statTable"),
                      hr(),
                      h4("Category Summary"),
                      p("Color coding:"),
                      tags$ul(
                        tags$li(strong("Green:"), " present in ALL files"),
                        tags$li(strong("Yellow:"), " present in ≥2 files"),
                        tags$li(strong("Red:"), " present in only 1 file")
                      ),
                      uiOutput("categorySummary")
               )
             )
    )
  )
)

# -------------------------------------------------------------------------------
# Server logic
# -------------------------------------------------------------------------------

library(jsonlite)
library(readr)
library(fhircrackr)
library(dplyr)
library(tidyr)
library(ggplot2)

server <- function(input, output, session) {
  
  # 1. Helpers for JSON/CSV ingestion
  loadJsonData <- function(path) {
    jd <- fromJSON(path)
    data.frame(Category = jd$Histogram$Category$`@value`,
               Count    = as.numeric(jd$Histogram$Count$`@value`),
               stringsAsFactors = FALSE)
  }
  
  output$mappingUI <- renderUI({
    req(input$dataFiles)
    fps <- input$dataFiles$datapath
    fns <- input$dataFiles$name
    uiList <- lapply(seq_along(fps), function(i) {
      if (tools::file_ext(fns[i]) == 'csv') {
        df <- read.csv(fps[i], stringsAsFactors = FALSE)
        if (!all(c('Category','Count') %in% names(df))) {
          tagList(
            h4(paste('Mapping for', fns[i])),
            selectInput(paste0('map_cat_', i), 'Category Column:', choices = names(df)),
            selectInput(paste0('map_cnt_', i), 'Count Column:',    choices = names(df))
          )
        }
      }
    })
    do.call(tagList, uiList)
  })
  
  loadCsvData <- function(path, idx) {
    df <- read.csv(path, stringsAsFactors = FALSE)
    if (!all(c('Category','Count') %in% names(df))) {
      req(input[[paste0('map_cat_', idx)]], input[[paste0('map_cnt_', idx)]])
      df <- data.frame(Category = df[[ input[[paste0('map_cat_', idx)]] ]],
                       Count    = as.numeric(df[[ input[[paste0('map_cnt_', idx)]] ]]),
                       stringsAsFactors = FALSE)
    }
    df
  }
  
  # 2. Helper for FHIR ingestion
  fhirSummary <- eventReactive(input$load_fhir, {
    req(input$fhir_url, input$max_bundles)
    req_fhir <- fhir_url(url = input$fhir_url, resource = 'Patient')
    bundles  <- fhir_search(request = req_fhir, verbose = 0, max_bundles = input$max_bundles)
    desc     <- fhir_table_description(resource = 'Patient', sep = ' || ', brackets = character(0), rm_empty_cols = FALSE, format = 'compact')
    df_pat   <- fhir_crack(bundles = bundles, design = desc, verbose = 0)
    df_pat %>% mutate(gender = ifelse(is.na(gender), 'unknown', gender)) %>%
      count(Category = gender, name = 'Count') %>% as.data.frame(stringsAsFactors = FALSE)
  })
  
  # 3. Combine sources into uniform list
  allData <- reactive({
    if (input$data_source == 'file') {
      req(input$dataFiles)
      fps <- input$dataFiles$datapath; fns <- input$dataFiles$name
      lapply(seq_along(fps), function(i) {
        ext <- tools::file_ext(fns[i])
        df  <- switch(ext,
                      'json' = loadJsonData(fps[i]),
                      'csv'  = loadCsvData(fps[i], i),
                      NULL)
        list(name = fns[i], data = df)
      })
    } else {
      df <- fhirSummary(); req(df)
      list(list(name = paste0('FHIR:', input$fhir_url), data = df))
    }
  })
  
  globalMax <- reactive({
    req(allData()); max(unlist(lapply(allData(), function(x) x$data$Count)), na.rm = TRUE)
  })
  
  # 4. Dataset list & stats
  output$dataList <- renderTable({
    do.call(rbind, lapply(allData(), function(x) data.frame(Dataset = x$name, Rows = nrow(x$data), stringsAsFactors = FALSE)))
  })
  output$statTable <- renderTable({
    do.call(rbind, lapply(allData(), function(x) data.frame(Dataset = x$name, Count = nrow(x$data), Mean = mean(x$data$Count, na.rm = TRUE), stringsAsFactors = FALSE)))
  })
  
  # 5. UI updates for combine & stack
  observe({
    req(allData()); names <- sapply(allData(), `[[`, 'name')
    updateCheckboxGroupInput(session, 'combineFiles', choices = names, selected = names)
    updateSelectInput(session, 'selectedPlotsToStack', choices = names)
  })
  observe({
    req(input$combineFiles)
    dl <- allData(); sel <- input$combineFiles; names_vec <- sapply(dl, `[[`, 'name')
    uis <- lapply(sel, function(fn) {
      idx <- which(names_vec == fn); df <- dl[[idx]]$data
      selectInput(paste0('values_', fn), paste('Select values for', fn), unique(df$Category), unique(df$Category), multiple = TRUE)
    })
    output$valueSelectors <- renderUI(do.call(tagList, uis))
  })
  
  # Combined data
  combinedData <- reactiveVal(NULL)
  observeEvent(input$combineData, {
    req(input$combineFiles)
    dl <- allData()
    cmb <- do.call(rbind, lapply(input$combineFiles, function(fn) {
      df <- dl[[which(sapply(dl, `[[`, 'name') == fn)]]$data
      sel <- input[[paste0('values_', fn)]]; df <- df[df$Category %in% sel, , drop = FALSE]; df$Source <- fn; df
    }))
    combinedData(cmb)
    output$combinedPlot <- renderPlot({
      ggplot(combinedData(), aes(x = Category, y = Count, fill = Source)) +
        geom_bar(stat = 'identity', position = 'stack') +
        scale_y_continuous(limits = c(0, globalMax())) +
        theme_minimal(base_size = 14) + labs(title = 'Combined Data', x = 'Category', y = 'Count')
    })
  })
  output$downloadCombined <- downloadHandler(
    filename = function() paste0('combined_data_', Sys.Date(), '.json'),
    content = function(file) write_json(combinedData(), file)
  )
  
  # Intersection data
  intersectionData <- reactiveVal(NULL)
  observe({
    req(input$combineFiles)
    dl <- allData()[sapply(allData(), `[[`, 'name') %in% input$combineFiles]
    common <- Reduce(intersect, lapply(dl, function(x) x$data$Category))
    updateSelectInput(session, 'intersectionValues', choices = common, selected = common)
  })
  observeEvent(input$combineIntersection, {
    req(input$combineFiles)
    dl <- allData(); cats <- input$intersectionValues
    inter <- do.call(rbind, lapply(input$combineFiles, function(fn) {
      df <- dl[[which(sapply(dl, `[[`, 'name') == fn)]]$data; df <- df[df$Category %in% cats, , drop = FALSE]; df$Source <- fn; df
    }))
    intersectionData(inter)
    output$intersectionPlot <- renderPlot({
      ggplot(intersectionData(), aes(x = Category, y = Count, fill = Source)) +
        geom_bar(stat = 'identity', position = 'stack') +
        scale_y_continuous(limits = c(0, globalMax())) +
        theme_minimal(base_size = 14) + labs(title = 'Intersection Data', x = 'Category', y = 'Count')
    })
  })
  output$downloadIntersection <- downloadHandler(
    filename = function() paste0('intersection_data_', Sys.Date(), '.json'),
    content = function(file) write_json(intersectionData(), file)
  )
  
  # 6. Map of Data Integration Centers
  output$map <- renderLeaflet({
    locs <- data.frame(name = c('Greifswald','Dresden','Leipzig','Aachen','Hannover','Hamburg','Berlin'),
                       lat = c(54.093,51.050,51.339,50.775,52.374,53.550,52.520),
                       lng = c(13.387,13.738,12.374,6.083,9.738,9.993,13.405), stringsAsFactors = FALSE)
    germany <- geodata::gadm('Germany', level = 0, path = tempdir())
    leaflet() %>%
      addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
      addPolygons(data = germany, color = '#333333', weight = 1, fill = FALSE) %>%
      setView(lng = 10.5, lat = 51.0, zoom = 6) %>%
      addCircleMarkers(data = locs, lat = ~lat, lng = ~lng, label = ~name, radius = 6, fill = TRUE, fillOpacity = 0.9)
  })
  
  # 7. Dynamic draggable plots
  output$plotsUI <- renderUI({
    req(allData())
    dl <- allData()
    tagList(lapply(seq_along(dl), function(i) {
      f <- dl[[i]]
      jqui_draggable(div(class = 'plot_box', `data-plot-name` = f$name,
                         div(style = 'display:flex; justify-content:space-between; align-items:center;',
                             h4(f$name), checkboxInput(paste0('cb_', i), NULL, TRUE)
                         ),
                         selectizeInput(paste0('filter_', i), 'Select values:', unique(f$data$Category), multiple = TRUE),
                         selectInput(paste0('pt_', i), 'Visualization:', c('Histogram','Pie Chart','Line Chart')),
                         uiOutput(paste0('plotUI_', i)),
                         sliderInput(paste0('op_', i), 'Transparency:', 0.1, 1, 1, 0.1)
      ))
    }))
  })
  
  observe({
    req(allData())
    dl <- allData()
    for (i in seq_along(dl)) {
      nameUI <- paste0('plotUI_', i); plotUI <- paste0('plot_', i)
      cb <- input[[paste0('cb_', i)]]; pt <- input[[paste0('pt_', i)]]
      fl <- input[[paste0('filter_', i)]]; op <- input[[paste0('op_', i)]]
      fdata <- dl[[i]]$data
      output[[nameUI]] <- renderUI({ if (isTRUE(cb)) plotOutput(plotUI, height = '300px') })
      output[[plotUI]] <- renderPlot({
        df <- if (!is.null(fl) & length(fl)) fdata[fdata$Category %in% fl, ] else fdata
        p <- ggplot(df, aes(x = Category, y = Count, fill = Category)) + theme_minimal(base_size = 14) + scale_y_continuous(limits = c(0, globalMax()))
        if (pt == 'Histogram') p <- p + geom_bar(stat = 'identity', alpha = op)
        if (pt == 'Pie Chart') p <- ggplot(df, aes(x = '', y = Count, fill = Category)) + geom_bar(stat = 'identity', alpha = op, width = 1) + coord_polar('y', start = 0)
        if (pt == 'Line Chart') p <- ggplot(df, aes(x = Category, y = Count, group = 1)) + geom_line(size = 1.2, alpha = op) + geom_point(size = 3, alpha = op)
        p + labs(title = dl[[i]]$name, x = 'Category', y = 'Count') + theme(panel.background = element_rect(fill = 'transparent', colour = NA), plot.background = element_rect(fill = 'transparent', colour = NA), panel.grid = element_blank())
      }, bg = 'transparent')
    }
  })
  
  # 8. Category summary matrix
  output$categorySummary <- renderUI({
    req(allData()); dl <- allData(); names <- sapply(dl, `[[`, 'name'); catMap <- list()
    for (f in dl) for (c in unique(f$data$Category)) catMap[[c]] <- union(catMap[[c]], f$name)
    nFiles <- length(names)
    rows <- lapply(names(catMap), function(c) { pres <- length(catMap[[c]]); color <- if (pres==nFiles) '#d4edda' else if (pres>=2) '#fff3cd' else '#f8d7da'; list(cat=c,pres=pres,color=color) })
    rows <- rows[order(-sapply(rows, `[[`, 'pres'), sapply(rows, `[[`, 'cat'))]
    html <- '<table style="width:100%; border-collapse:collapse;" border="1">'
    html <- paste0(html, '<tr style="background:#f2f2f2;"><th>Category</th>', paste0('<th>', names, '</th>', collapse=''), '<th>Count</th></tr>')
    for (r in rows) {
      cells <- paste0(ifelse(names %in% catMap[[r$cat]], paste0('<td style="background:', r$color, ';"></td>'), '<td></td>'), collapse='')
      html <- paste0(html, '<tr><td>', r$cat, '</td>', cells, '<td style="text-align:center;">', r$pres, '</td></tr>')
    }
    HTML(paste0(html, '</table>'))
  })
}

# Launch app
shinyApp(ui = ui, server = server)
