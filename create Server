# -------------------------------------------------------------------------------

server <- function(input, output, session) {
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 1. Data Ingestion Helpers
  #───────────────────────────────────────────────────────────────────────────────#
  
  # Load and parse a JSON file into a two-column data.frame (Category, Count).
  loadJsonData <- function(filePath) {
    jsonData <- fromJSON(filePath)
    data.frame(
      Category = jsonData$Histogram$Category$`@value`,
      Count    = as.numeric(jsonData$Histogram$Count$`@value`),
      stringsAsFactors = FALSE
    )
  }
  
  # Render dynamic UI inputs for CSV column mapping when column names deviate.
  output$mappingUI <- renderUI({
    req(input$jsonFiles)
    filePaths <- input$jsonFiles$datapath
    fileNames <- input$jsonFiles$name
    
    # Generate mapping selectors only for CSV files lacking standard headers.
    mappingInputs <- lapply(seq_along(filePaths), function(i) {
      if (tools::file_ext(fileNames[i]) == "csv") {
        data <- read.csv(filePaths[i], stringsAsFactors = FALSE)
        if (!all(c("Category", "Count") %in% colnames(data))) {
          tagList(
            h4(paste("Mapping for", fileNames[i])),
            selectInput(
              inputId  = paste0("map_category_", i),
              label    = "Category Column:",
              choices  = colnames(data)
            ),
            selectInput(
              inputId  = paste0("map_count_", i),
              label    = "Count Column:",
              choices  = colnames(data)
            )
          )
        }
      }
    })
    
    do.call(tagList, mappingInputs)
  })
  
  # Load and normalize CSV data according to user-specified column mappings.
  loadCsvData <- function(filePath, fileIndex) {
    csvData <- read.csv(filePath, stringsAsFactors = FALSE)
    
    # If headers are non-standard, wait for mapping inputs before proceeding.
    if (!all(c("Category", "Count") %in% colnames(csvData))) {
      req(input[[paste0("map_category_", fileIndex)]],
          input[[paste0("map_count_",    fileIndex)]])
      csvData <- data.frame(
        Category = csvData[[ input[[paste0("map_category_", fileIndex)]] ]],
        Count    = as.numeric(csvData[[ input[[paste0("map_count_",    fileIndex)]] ]]),
        stringsAsFactors = FALSE
      )
    }
    
    csvData
  }
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 2. Reactive Data Aggregation
  #───────────────────────────────────────────────────────────────────────────────#
  
  # Load all uploaded files (JSON & CSV) into a list of named data.frames.
  allData <- reactive({
    req(input$jsonFiles)
    paths <- input$jsonFiles$datapath
    names <- input$jsonFiles$name
    
    lapply(seq_along(paths), function(i) {
      ext <- tools::file_ext(names[i])
      df  <- switch(ext,
        "json" = loadJsonData(paths[i]),
        "csv"  = loadCsvData(paths[i], i),
        NULL
      )
      list(name = names[i], data = df)
    })
  })
  
  # Determine the global maximum Count across all datasets for uniform scaling.
  globalMax <- reactive({
    req(allData())
    max(unlist(lapply(allData(), function(f) f$data$Count)), na.rm = TRUE)
  })
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 3. Basic Outputs: File List & Statistics
  #───────────────────────────────────────────────────────────────────────────────#
  
  # Display uploaded filenames in a simple table.
  output$jsonList <- renderTable({
    req(input$jsonFiles)
    data.frame(Files = input$jsonFiles$name, stringsAsFactors = FALSE)
  })
  
  # Compute and render basic statistics (row count, mean Count) per file.
  output$statTable <- renderTable({
    req(allData())
    stats <- lapply(allData(), function(f) {
      n <- nrow(f$data)
      m <- if (n > 0) mean(f$data$Count, na.rm = TRUE) else NA_real_
      data.frame(File = f$name, Count = n, Mean = m, stringsAsFactors = FALSE)
    })
    do.call(rbind, stats)
  })
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 4. UI Updates: Combined Data & Plot Stacking
  #───────────────────────────────────────────────────────────────────────────────#
  
  # Populate the “Combine Files” checkbox group with all uploaded filenames.
  observe({
    req(allData())
    names <- sapply(allData(), `[[`, "name")
    updateCheckboxGroupInput(session, "combineFiles",
                             choices  = names,
                             selected = names)
  })
  
  # Populate the “Select two plots to stack” dropdown with all filenames.
  observe({
    req(allData())
    updateSelectInput(session, "selectedPlotsToStack",
                      choices = sapply(allData(), `[[`, "name"))
  })
  
  # Dynamically generate per-file value selectors in “Combined Data” tab.
  observe({
    req(input$combineFiles)
    files <- input$combineFiles
    dataList <- allData()
    
    selectors <- lapply(files, function(fn) {
      df <- dataList[[which(sapply(dataList, `[[`, "name") == fn)]] ]$data
      selectInput(
        inputId  = paste0("values_", fn),
        label    = paste("Select values for", fn),
        choices  = unique(df$Category),
        selected = unique(df$Category),
        multiple = TRUE
      )
    })
    
    output$valueSelectors <- renderUI(tagList(selectors))
  })
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 5. Combined Data: Reactive Plot and Download
  #───────────────────────────────────────────────────────────────────────────────#
  
  combinedDataReactive <- reactiveVal(NULL)
  
  # Upon clicking “Combine Data,” concatenate filtered subsets and render plot.
  observeEvent(input$combineData, {
    req(input$combineFiles)
    dataList <- allData()
    
    combined <- do.call(rbind, lapply(input$combineFiles, function(fn) {
      df <- dataList[[which(sapply(dataList, `[[`, "name") == fn)]] ]$data
      sel <- input[[paste0("values_", fn)]]
      sub <- df[df$Category %in% sel, , drop = FALSE]
      sub$Source <- fn
      sub
    }))
    
    combinedDataReactive(combined)
    
    output$combinedPlot <- renderPlot({
      req(combined)
      ggplot(combined, aes(x = Category, y = Count, fill = Source)) +
        geom_bar(stat = "identity", position = "stack") +
        labs(title = "Combined Data (Stacked)", x = "Category", y = "Count") +
        theme_minimal(base_size = 14)
    })
  })
  
  # Provide JSON download of the combined dataset.
  output$downloadCombined <- downloadHandler(
    filename = function() paste0("combined_data_", Sys.Date(), ".json"),
    content  = function(file) {
      cData <- combinedDataReactive()
      if (!is.null(cData)) write_json(cData, file)
    }
  )
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 6. Intersection Data: Reactive Plot and Download
  #───────────────────────────────────────────────────────────────────────────────#
  
  intersectionDataReactive <- reactiveVal(NULL)
  
  # Compute common categories across selected files and update selector.
  observe({
    req(input$combineFiles)
    dataList <- allData()[sapply(allData(), `[[`, "name") %in% input$combineFiles]
    commonCats <- Reduce(intersect, lapply(dataList, `[[`, "data") %>% lapply(`[[`, "Category"))
    updateSelectInput(session, "intersectionValues",
                      choices  = commonCats,
                      selected = commonCats)
  })
  
  # Upon clicking “Combine Intersection,” filter and render stacked plot.
  observeEvent(input$combineIntersection, {
    req(input$combineFiles)
    dataList <- allData()
    cats <- input$intersectionValues
    
    inter <- do.call(rbind, lapply(input$combineFiles, function(fn) {
      df <- dataList[[which(sapply(dataList, `[[`, "name") == fn)]] ]$data
      sub <- df[df$Category %in% cats, , drop = FALSE]
      sub$Source <- fn
      sub
    }))
    
    intersectionDataReactive(inter)
    
    output$intersectionPlot <- renderPlot({
      req(inter)
      ggplot(inter, aes(x = Category, y = Count, fill = Source)) +
        geom_bar(stat = "identity", position = "stack") +
        labs(title = "Intersection Data (Stacked)", x = "Category", y = "Count") +
        theme_minimal(base_size = 14)
    })
  })
  
  # Provide JSON download of the intersection dataset.
  output$downloadIntersection <- downloadHandler(
    filename = function() paste0("intersection_data_", Sys.Date(), ".json"),
    content  = function(file) {
      iData <- intersectionDataReactive()
      if (!is.null(iData)) write_json(iData, file)
    }
  )
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 7. Geospatial Mapping of Data Integration Centers
  #───────────────────────────────────────────────────────────────────────────────#
  
  output$map <- renderLeaflet({
    locations <- data.frame(
      name = c("Greifswald","Dresden","Leipzig","Aachen","Hannover","Hamburg","Berlin"),
      lat  = c(54.093,   51.050,   51.339,   50.775,   52.374,   53.550,   52.520),
      lng  = c(13.387,   13.738,   12.374,    6.083,    9.738,    9.993,   13.405),
      stringsAsFactors = FALSE
    )
    
    # Load national boundary and render interactive map with markers.
    germany <- gadm("Germany", level = 0, path = tempdir())
    leaflet() %>%
      addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
      addPolygons(data = germany, color = "#333333", weight = 1, fill = FALSE) %>%
      setView(lng = 10.5, lat = 51.0, zoom = 6) %>%
      addCircleMarkers(
        data     = locations,
        lat      = ~lat, lng = ~lng,
        label    = ~name,
        radius   = 6,
        fill     = TRUE,
        fillOpacity = 0.9
      )
  })
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 8. Dynamic, Draggable Plot Panels
  #───────────────────────────────────────────────────────────────────────────────#
  
  output$plotsUI <- renderUI({
    req(allData())
    dataList <- allData()
    
    # Create a draggable container for each dataset with filter, type, and opacity.
    tagList(lapply(seq_along(dataList), function(i) {
      f <- dataList[[i]]
      jqui_draggable(
        div(
          id              = paste0("plot_box_", i),
          class           = "plot_box",
          `data-plot-name`= f$name,
          
          # Header with filename and visibility toggle
          div(style = "display:flex; justify-content:space-between; align-items:center;",
              h4(f$name),
              checkboxInput(paste0("checkbox_", i), label = NULL, value = TRUE)
          ),
          
          # Category filter selector
          selectizeInput(
            inputId = paste0("filter_",    i),
            label   = "Choose values:",
            choices = unique(f$data$Category),
            multiple= TRUE
          ),
          
          # Plot type selector
          selectInput(
            inputId = paste0("plotType_",   i),
            label   = "Choose Visualization:",
            choices = c("Histogram", "Pie Chart", "Line Chart")
          ),
          
          # Placeholder for the chosen plot
          uiOutput(paste0("plotUI_", i)),
          
          # Opacity slider for transparency control
          sliderInput(
            inputId = paste0("opacity_", i),
            label   = "Transparency:",
            min     = 0.1, max = 1, value = 1, step = 0.1
          )
        )
      )
    }))
  })
  
  # Render each individual plot based on user controls, with unified y-axis scaling.
  observe({
    req(allData())
    dataList <- allData()
    
    lapply(seq_along(dataList), function(i) {
      f <- dataList[[i]]
      cbId   <- paste0("checkbox_", i)
      ptId   <- paste0("plotType_",    i)
      flId   <- paste0("filter_",      i)
      opId   <- paste0("opacity_",     i)
      outUI  <- paste0("plotUI_",      i)
      outPlt <- paste0("plot_",        i)
      
      # Conditionally display the plotOutput placeholder
      output[[outUI]] <- renderUI({
        if (isTRUE(input[[cbId]])) plotOutput(outPlt, height = "300px")
      })
      
      # Generate the requested plot type with transparency and global scaling
      output[[outPlt]] <- renderPlot({
        req(input[[cbId]])
        df  <- f$data
        sel <- input[[flId]]
        if (!is.null(sel) && length(sel)) df <- df[df$Category %in% sel, , drop = FALSE]
        alpha <- input[[opId]]
        
        p <- ggplot(df, aes(x = Category, y = Count, fill = Category)) +
          theme_minimal(base_size = 14) +
          scale_y_continuous(limits = c(0, globalMax()))
        
        if (input[[ptId]] == "Histogram") {
          p <- p + geom_bar(stat = "identity", alpha = alpha)
        } else if (input[[ptId]] == "Pie Chart") {
          p <- ggplot(df, aes(x = "", y = Count, fill = Category)) +
               geom_bar(stat = "identity", alpha = alpha, width = 1) +
               coord_polar("y", start = 0)
        } else if (input[[ptId]] == "Line Chart") {
          p <- ggplot(df, aes(x = Category, y = Count, group = 1)) +
               geom_line(size = 1.2, alpha = alpha) +
               geom_point(size = 3, alpha = alpha)
        }
        
        p + labs(title = f$name, x = "Category", y = "Count") +
            theme(
              panel.background = element_rect(fill = "transparent", colour = NA),
              plot.background  = element_rect(fill = "transparent", colour = NA),
              panel.grid       = element_blank()
            )
      }, bg = "transparent")
    })
  })
  
  #───────────────────────────────────────────────────────────────────────────────#
  # 9. Category Summary: Color-Coded Presence Matrix
  #───────────────────────────────────────────────────────────────────────────────#
  
  output$categorySummary <- renderUI({
    req(allData())
    dataList   <- allData()
    fileNames  <- sapply(dataList, `[[`, "name")
    categoryMap <- list()
    
    # Build a map from category to list of files containing it
    for (f in dataList) {
      cats <- unique(f$data$Category)
      for (cat in cats) {
        categoryMap[[cat]] <- union(categoryMap[[cat]], f$name)
      }
    }
    
    nFiles <- length(fileNames)
    rows   <- lapply(names(categoryMap), function(cat) {
      present <- length(categoryMap[[cat]])
      color   <- if (present == nFiles) "#d4edda" else
                 if (present >= 2)      "#fff3cd" else "#f8d7da"
      list(cat = cat, present = present, color = color)
    })
    
    # Sort so green-full, then partial, then unique categories appear first
    rows_sorted <- rows[order(-sapply(rows, `[[`, "present"), sapply(rows, `[[`, "cat"))]
    
    # Construct HTML table with colored cells
    tbl <- "<table style='width:100%; border-collapse: collapse;' border='1'>"
    tbl <- paste0(tbl, "<tr style='background-color:#f2f2f2;'><th>Category</th>",
                  paste0("<th>", fileNames, "</th>", collapse=""), "<th>Count</th></tr>")
    
    for (r in rows_sorted) {
      tbl <- paste0(tbl, "<tr><td>", r$cat, "</td>",
                    paste0(
                      ifelse(fileNames %in% categoryMap[[r$cat]],
                             paste0("<td style='background-color:", r$color, ";'></td>"),
                             "<td></td>"),
                      collapse = ""
                    ),
                    "<td style='text-align:center;'>", r$present, "</td></tr>")
    }
    
    HTML(paste0(tbl, "</table>"))
  })
}

# Launch the application
shinyApp(ui = ui, server = server)


